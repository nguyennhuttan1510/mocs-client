{"version":3,"sources":["hook/useDispatch.js","pages/Login/index.js"],"names":["useDispatchAction","dispatch","useDispatch","action","value","callback","payload","params","type","Login","props","history","useHistory","tailLayout","wrapperCol","offset","span","className","labelCol","name","initialValues","remember","onFinish","values","username","password","CONSTANT","ACTION_TYPE","LOGIN","res","status","push","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","Password","valuePropName","htmlType"],"mappings":"+FAAA,YAaeA,IAXW,WACtB,IAAMC,EAAWC,cAQjB,OAPuB,SAACC,EAAQC,GAAgC,IAAzBC,EAAwB,uDAAb,aACxCC,EAAU,CACZC,OAAQH,EACRC,YAEJJ,EAAS,CAAEO,KAAI,OAAEL,QAAF,IAAEA,IAAU,iBAAkBG,QAASA,O,mKC0F/CG,UA5FD,SAACC,GACX,IAAMT,EAAWD,cACXW,EAAUC,cAKVC,EAAa,CACfC,WAAY,CAAEC,OAAQ,EAAGC,KAAM,KA0CnC,OACI,qBAAKC,UAAU,aAAf,SACI,eAAC,IAAD,2BAjDO,CACXC,SAAU,CAAEF,KAAM,GAClBF,WAAY,CAAEE,KAAM,MA+ChB,IAEIG,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BC,SA7CK,SAACC,GACd,IAAMnB,EAAQ,CACVoB,SAAUD,EAAOC,SACjBC,SAAUF,EAAOE,UAErBxB,EAASyB,IAASC,YAAYC,MAAOxB,GAAO,SAACyB,GACrCA,EAAIC,QACJnB,EAAQoB,KAAK,oBAuCbC,eAXW,SAACC,GACpBC,QAAQC,IAAI,UAAWF,IAKnB,UAOI,cAAC,IAAKG,KAAN,CACIC,MAAM,WACNlB,KAAK,WACLmB,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,gCAJnC,SAOI,cAAC,IAAD,MAGJ,cAAC,IAAKJ,KAAN,CACIC,MAAM,WACNlB,KAAK,WACLmB,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,gCAJnC,SAOI,cAAC,IAAMC,SAAP,MAGJ,cAAC,IAAKL,KAAN,2BAAevB,GAAf,IAA2BM,KAAK,WAAWuB,cAAc,UAAzD,SACI,cAAC,IAAD,6BAGJ,cAAC,IAAKN,KAAN,2BAAevB,GAAf,aACI,cAAC,IAAD,CAAQL,KAAK,UAAUmC,SAAS,SAAhC","file":"static/js/16.9a5c8a94.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux'\n\nconst useDispatchAction = () => {\n    const dispatch = useDispatch()\n    const dispatchAction = (action, value, callback = () => {}) => {\n        const payload = {\n            params: value,\n            callback,\n        }\n        dispatch({ type: action ?? 'SINGLE-REQUEST', payload: payload })\n    }\n    return dispatchAction\n}\nexport default useDispatchAction\n","import React from 'react'\nimport { Form, Input, Button, Checkbox } from 'antd'\nimport { authAction } from 'stores/reducers/user'\nimport './style.scss'\nimport useDispatchAction from 'hook/useDispatch'\nimport { CONSTANT } from 'stores/constants'\nimport { useHistory } from 'react-router'\nconst Login = (props) => {\n    const dispatch = useDispatchAction()\n    const history = useHistory()\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 },\n    }\n\n    const onFinish = (values) => {\n        const value = {\n            username: values.username,\n            password: values.password,\n        }\n        dispatch(CONSTANT.ACTION_TYPE.LOGIN, value, (res) => {\n            if (res.status) {\n                history.push('/mocs-client')\n            }\n        })\n        // console.log(authAction.login(account));\n        // Authenticator.signin(acc).then((response) => {\n        //   if (!response) {\n        //     openNotificationWithIcon(\n        //       \"error\",\n        //       \"Login Failed\",\n        //       \"Username or Password incorrect\"\n        //     );\n        //     return;\n        //   }\n        //   if (response.status && response.data) {\n        //     dispatch(getProfile(response.data));\n        //     //DIVIDE PAGE FOR POSITION\n        //     if (response.data?.position === \"Admin\") {\n        //       dispatch(setTitleHeader(\"Management Business\"));\n        //       history.push(\"/admin/management-business\");\n\n        //       return;\n        //     }\n        //     dispatch(setTitleHeader(\"Dashboard\"));\n        //     history.push(\"/MoCS\");\n        //   }\n        // });\n    }\n\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo)\n    }\n\n    return (\n        <div className='form-login'>\n            <Form\n                {...layout}\n                name='basic'\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n            >\n                <Form.Item\n                    label='Username'\n                    name='username'\n                    rules={[\n                        { required: true, message: 'Please input your username!' },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item\n                    label='Password'\n                    name='password'\n                    rules={[\n                        { required: true, message: 'Please input your password!' },\n                    ]}\n                >\n                    <Input.Password />\n                </Form.Item>\n\n                <Form.Item {...tailLayout} name='remember' valuePropName='checked'>\n                    <Checkbox>Remember me</Checkbox>\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type='primary' htmlType='submit'>\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n    )\n}\nexport default Login\n"],"sourceRoot":""}