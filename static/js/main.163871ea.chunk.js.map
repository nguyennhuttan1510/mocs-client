{"version":3,"sources":["components/WrapRoute/index.js","components/RouteWithLayout/index.js","Routes.js","stores/sagas/auth.js","stores/sagas/index.js","stores/store.js","util/History/index.js","App.js","components/ErrorBoundary/index.js","reportWebVitals.js","index.js","stores/reducers/user.js","stores/reducers/dashboard.js","stores/reducers/management.js","services/httpClient.js","stores/constants.js","services/SocketIO/SocketClient.js","api/auth.js","stores/reducers/current.js"],"names":["WrapRoute","children","propTypes","PropTypes","element","isRequired","RouteWithLayout","props","Layout","layout","Component","component","rest","path","history","useHistory","profile","useSelector","state","user","useEffect","Object","keys","length","push","render","matchProps","Main","lazy","NoLayout","SignIn","Home","Business","Personnel","Profile","Routes","location","useLocation","override","css","routes","exact","name","fallback","pathname","className","loading","color","map","item","key","handleLogin","handleLogout","wrapFlowAccess","auth","payload","console","log","params","call","Authenticator","login","res","status","put","type","authAction","loginSuccess","data","callback","loginFail","Error","logoutSuccess","access","take","CONSTANT","ACTION_TYPE","LOGIN","action","LOGOUT","fork","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","dashboard","management","current","middleware","getDefaultMiddleware","concat","run","createBrowserHistory","App","React","SocketClient","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","createSlice","initialState","reducers","getProfile","actions","isRedirectDetail","table","staffs","listTable","listMenu","setIsDetail","currentTable","filter","e","id","payBill","tables","index","findIndex","splice","addTable","addMenuOfTable","food","menu","removeMenuOfTable","tableAction","managementStaff","managementBestSeller","foodBestSeller","manager","HttpClient","config","axios","create","baseURL","process","headers","socket","io","transports","dispatch","useDispatch","on","listStaff","httpClient","account","a","result","post","message","getStaff","get","handleResponse","titleHeader","setTitleHeader","currentState"],"mappings":"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","file":"static/js/main.163871ea.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nconst WrapRoute = ({ children }) => {\n    return <>{children}</>\n}\n\nWrapRoute.propTypes = {\n    children: PropTypes.element.isRequired,\n}\n\nexport default WrapRoute\n","import React, { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Route, useHistory, Redirect } from 'react-router-dom'\n\nconst RouteWithLayout = (props) => {\n    const { layout: Layout, component: Component, path, ...rest } = props\n    const history = useHistory()\n    const profile = useSelector((state) => state.user.profile)\n\n    useEffect(() => {\n        const isLogin = Object.keys(profile).length === 0\n        if (isLogin) {\n            history.push('/login')\n        }\n    }, [profile])\n    return (\n        <Route\n            {...rest}\n            render={(matchProps) => (\n                <Layout {...matchProps}>\n                    <Component {...matchProps} />\n                </Layout>\n            )}\n        />\n    )\n}\n\nexport default RouteWithLayout\n","import { css } from '@emotion/react'\nimport WrapRoute from 'components/WrapRoute'\nimport React, { lazy, Suspense } from 'react'\nimport { Switch, useLocation } from 'react-router-dom'\nimport ScaleLoader from 'react-spinners/ScaleLoader'\n// import 'style/_Root.scss'\nimport RouteWithLayout from 'components/RouteWithLayout'\n\nconst Main = lazy(() => import('layouts/Main'))\nconst NoLayout = lazy(() => import('layouts/NoLayout'))\nconst SignIn = lazy(() => import('pages/Login'))\nconst Home = lazy(() => import('pages/Home'))\nconst Business = lazy(() => import('pages/Business'))\nconst Personnel = lazy(() => import('pages/Personnel'))\nconst Profile = lazy(() => import('pages/Profile'))\n\nconst Routes = () => {\n    // CONFIG ROUTE\n    const location = useLocation()\n    const override = css`\n        border-color: #001529;\n    `\n    const routes = [\n        {\n            path: '/mocs-client',\n            component: Home,\n            layout: Main,\n            exact: true,\n            name: 'Home Page',\n            //   route: private,\n        },\n        {\n            path: '/login',\n            component: SignIn,\n            layout: NoLayout,\n            exact: true,\n            name: 'Login Page',\n        },\n        {\n            path: '/admin/management-business',\n            component: Business,\n            layout: Main,\n            exact: true,\n            name: 'Admin Page',\n        },\n        {\n            path: '/admin/management-staff',\n            component: Personnel,\n            layout: Main,\n            exact: true,\n            name: 'Management Staff Page',\n        },\n        {\n            path: '/profile/:id',\n            component: Profile,\n            layout: Main,\n            exact: true,\n            name: 'Profile Page',\n        },\n        // {\n        //     path: '*',\n        //     component: () => (\n        //         <div>\n        //             <h1>Page not found</h1>\n        //         </div>\n        //     ),\n        //     layout: NoLayout,\n        //     name: 'Page Not Found',\n        // },\n    ]\n\n    return (\n        <Suspense\n            fallback={\n                location.pathname !== '/login' && (\n                    <div className='loading'>\n                        <ScaleLoader\n                            loading={true}\n                            css={override}\n                            color={'#001529'}\n                        />\n                        {/* ...loading */}\n                    </div>\n                )\n            }\n        >\n            <Switch>\n                {routes.map((item, key) => (\n                    <RouteWithLayout\n                        key={key}\n                        name={item.name}\n                        layout={item.layout}\n                        component={item.component}\n                        exact={item.exact}\n                        path={item.path}\n                    />\n                ))}\n            </Switch>\n        </Suspense>\n    )\n}\n\nexport default Routes\n","import { fork, call, put, take } from 'redux-saga/effects'\nimport { authAction } from 'stores/reducers/user'\nimport Authenticator from 'api/auth'\nimport { CONSTANT } from 'stores/constants'\n\nfunction* handleLogin(payload) {\n    console.log('Login')\n    console.log(payload.params)\n    const res = yield call(Authenticator.login, payload.params)\n    console.log('🚀 ~ file: auth.js ~ line 9 ~ function*handleLogin ~ res', res)\n    if (res.status) {\n        console.log('was accessed')\n        yield put({ type: authAction.loginSuccess().type, payload: res.data })\n        payload.callback(res)\n    } else {\n        console.log(\"wasn't accessed\")\n        yield put({ type: authAction.loginFail().type })\n        throw new Error('')\n    }\n}\n\nfunction* handleLogout() {\n    console.log('Logout')\n    yield put({ type: authAction.logoutSuccess().type })\n}\n\nfunction* wrapFlowAccess() {\n    console.log('saga-auth')\n    while (true) {\n        // ALLOW ACCESS AGAIN WHEN IT FAILED\n        let access = false\n        while (!access) {\n            const action = yield take(CONSTANT.ACTION_TYPE.LOGIN)\n            try {\n                yield call(handleLogin, action.payload)\n                access = true\n            } catch (error) {\n                access = false\n            }\n        }\n\n        //LOGOUT\n        yield take(CONSTANT.ACTION_TYPE.LOGOUT)\n        yield call(handleLogout)\n    }\n}\n\nexport default function* auth() {\n    yield fork(wrapFlowAccess)\n}\n","import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects'\nimport { authAction } from 'stores/reducers/user'\nimport auth from './auth'\n// import Api from '...';\n\n// Worker saga will be fired on USER_FETCH_REQUESTED actions\n// function* fetchUser(action) {\n//     // try {\n//     //   const user = yield call(Api.fetchUser, action.payload.userId);\n//     //   yield put({ type: 'USER_FETCH_SUCCEEDED', user: user });\n//     // } catch (e) {\n//     //   yield put({ type: 'USER_FETCH_FAILED', message: e.message });\n//     // }\n//     console.log('run fetch User')\n//     // yield takeEvery('*', log)\n//     console.log(authAction.loginSuccess().type)\n//     yield put({ type: authAction.loginSuccess().type })\n// }\n\n// Starts fetchUser on each dispatched USER_FETCH_REQUESTED action\n// Allows concurrent fetches of user\nexport default function* rootSaga() {\n    yield all([auth()])\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './sagas'\nimport user from 'stores/reducers/user'\nimport dashboard from './reducers/dashboard'\nimport management from './reducers/management'\nimport current from './reducers/current'\n\n// Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = configureStore({\n    reducer: {\n        user: user,\n        dashboard: dashboard,\n        management: management,\n        current: current,\n    },\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().concat(sagaMiddleware),\n})\n\n// Then run the saga\nsagaMiddleware.run(rootSaga)\n\n// Render the application\nexport default store\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport SocketClient from 'services/SocketIO/SocketClient'\nimport Routes from 'Routes'\nimport store from 'stores/store'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport WrapRoute from 'components/WrapRoute'\nimport 'App.scss'\nimport 'antd/dist/antd.css'\nimport history from 'util/History'\nimport ErrorBoundary from 'components/ErrorBoundary'\nconst App = (props) => {\n    return (\n        // <ErrorBoundary>\n        <Provider store={store}>\n            <SocketClient>\n                <Router history={history}>\n                    <WrapRoute>\n                        <Routes />\n                    </WrapRoute>\n                </Router>\n            </SocketClient>\n        </Provider>\n        // </ErrorBoundary>\n    )\n}\n\nexport default App\n","import React from 'react'\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { hasError: false }\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true }\n    }\n\n    // componentDidCatch(error, errorInfo) {\n    //   // You can also log the error to an error reporting service\n    //   logErrorToMyService(error, errorInfo);\n    // }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    profile: {},\n}\n\nconst user = createSlice({\n    name: 'user',\n    initialState: initialState,\n    reducers: {\n        loginSuccess(state, action) {\n            console.log(\n                '🚀 ~ file: user.js ~ line 12 ~ loginSuccess ~ action',\n                action.payload\n            )\n\n            state.profile = action.payload\n        },\n        loginFail(state, action) {\n            state.profile = {}\n        },\n\n        logoutSuccess(state, action) {\n            state.profile = {}\n        },\n\n        getProfile(state, action) {\n            state.profile = action.payload\n        },\n    },\n})\nexport const authAction = user.actions\n\nexport default user.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    isRedirectDetail: false,\n    table: {},\n    data: [],\n    staffs: [],\n    listTable: [],\n    listMenu: {},\n}\n\nconst dashboard = createSlice({\n    name: 'dashboard',\n    initialState: initialState,\n    reducers: {\n        setIsDetail: (state, action) =>\n            void (state.isRedirectDetail = action.payload),\n        table: (state, action) => {\n            const table = action.payload\n            if (table) {\n                const currentTable = state.data.filter((e) => e.id === table.id)\n                if (currentTable.length > 0) {\n                    state.table = currentTable[0]\n                    return\n                } else {\n                    state.table = table\n                    return\n                }\n            }\n            state.table = {}\n        },\n\n        payBill: (state, action) => {\n            const tables = state.data\n            const id = action.payload\n            const index = tables.findIndex((e) => e.id === id)\n            tables.splice(index, 1)\n        },\n\n        addTable: (state, action) => void (state.data = action.payload),\n\n        addMenuOfTable: (state, action) => {\n            const { id, food } = action.payload //id = id table, food = food is list food in table\n            state.data = state.data.map((e) =>\n                e.id === id ? { ...e, menu: food } : e\n            )\n        },\n\n        removeMenuOfTable: (state, action) => {\n            //id = id table, food = food has removed in table\n            const { id, food } = action.payload\n\n            state.data = state.data.map((item) =>\n                item.id === id\n                    ? { ...item, menu: item.menu.filter((e) => e.id !== food.id) }\n                    : item\n            )\n        },\n\n        staffs: (state, action) => void (state.staffs = action.payload),\n\n        listTable: (state, action) => void (state.listTable = action.payload),\n        listMenu: (state, action) => void (state.listMenu = action.payload),\n    },\n})\nexport const tableAction = dashboard.actions\nexport default dashboard.reducer\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst state = {\r\n    managementStaff: [],\r\n    managementBestSeller: [],\r\n}\r\n\r\nconst management = createSlice({\r\n    name: 'management',\r\n    initialState: state,\r\n    reducers: {\r\n        managementStaff: (state, action) =>\r\n            void (state.managementStaff = action.payload),\r\n\r\n        foodBestSeller: (state, action) =>\r\n            void (state.managementBestSeller = action.payload),\r\n    },\r\n})\r\nexport const manager = management.actions\r\n\r\nexport default management.reducer\r\n","import axios from 'axios';\n\nconst HttpClient = (config) => {\n  const headerOptions = {\n    'Content-type': 'application/json',\n    'cache-control': 'no-cache',\n  };\n\n  return axios.create({\n    baseURL: process.env.REACT_APP_API_SERVER, // ENV LOCAL IS \"HTTP://\"\n    headers: headerOptions,\n  });\n};\n\nexport default HttpClient;\n","export const CONSTANT = {\n    ACTION_TYPE: {\n        LOGIN: 'USER/LOGIN',\n        LOGOUT: 'USER/LOGOUT',\n    },\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { io } from 'socket.io-client'\nimport { tableAction } from 'stores/reducers/dashboard'\nimport { manager } from 'stores/reducers/management'\n\n//CONNECT SERVER SOCKET IO\nconst ENDPOINT = process.env.REACT_APP_API_SERVER\nexport const socket = io(ENDPOINT, {\n    transports: ['websocket'],\n})\n\n//LISTEN DATA FORM SERVER\nconst SocketClient = ({ children }) => {\n    const dispatch = useDispatch()\n\n    socket.on('data-table', (listTable) => {\n        dispatch(tableAction.addTable(listTable))\n    })\n\n    socket.on('data-staff', (listStaff) => {\n        dispatch(tableAction.staffs(listStaff))\n    })\n\n    socket.on('data-management', (data) => {\n        console.log(data)\n        dispatch(manager.managementStaff(data))\n    })\n\n    socket.on('data-menu', (data) => {\n        console.log(data)\n        dispatch(tableAction.listMenu(data))\n    })\n\n    socket.on('data-default-table', (data) => {\n        console.log(data)\n        dispatch(tableAction.listTable(data))\n    })\n\n    socket.on('data-best-seller', (data) => {\n        console.log(data)\n        dispatch(manager.foodBestSeller(data))\n    })\n    return <>{children}</>\n}\n\nSocketClient.propTypes = {\n    children: PropTypes.element.isRequired,\n}\n\nexport default SocketClient\n","import HttpClient from 'services/httpClient'\n\nconst httpClient = HttpClient()\n\nconst login = async (account) => {\n    let result = {}\n    try {\n        const res = await httpClient.post('/login', account)\n        if (res.data?.status) {\n            result = {\n                status: true,\n                data: res.data.data,\n                message: 'Login successful',\n            }\n        } else {\n            throw new Error('Login is invalid')\n        }\n    } catch (error) {\n        result = {\n            status: false,\n            message: error.message,\n        }\n    }\n    return result\n}\n\nconst getStaff = async (id) => {\n    let result;\n    try {\n      const httpClient = HttpClient();\n      const handleResponse = await httpClient.get(`/staff/${id}`);\n      result = await handleResponse.data;\n      console.log(result);\n      if (result.status) {\n        result = {\n          status: true,\n          data: result.data,\n        };\n      }\n    } catch (error) {\n      console.log(error);\n      result = {\n        status: false,\n        message: \"Profile not found\",\n      };\n    }\n    return result;\n  };\n\nconst Authenticator = {\n    login,\n    getStaff,\n}\n\nexport default Authenticator\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    titleHeader: '',\n}\n\nconst current = createSlice({\n    name: 'current',\n    initialState: initialState,\n    reducers: {\n        setTitleHeader: (state, actions) =>\n            void (state.titleHeader = actions.payload),\n    },\n})\nexport const currentState = current.actions\n\nexport default current.reducer\n"],"sourceRoot":""}